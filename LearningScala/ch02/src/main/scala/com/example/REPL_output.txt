// Chapter 02
//-----------
scala> val x: Int = 5
x: Int = 5

scala> x
res0: Int = 5

scala> x * 2
res1: Int = 10

scala> x / 5
res2: Int = 1

scala> res0 * res1
res3: Int = 50

// Values
//-------
scala> val x1: Int = 20
x1: Int = 20

scala> val greeting: String = "Hello, World"
greeting: String = Hello, World

scala> val atSymbol: Char = '@'
atSymbol: Char = @

// type inference
//---------------
scala> val x2 = 20
x2: Int = 20

scala> val greeting1 = "Hello, World"
greeting1: String = Hello, World

scala> val atSymbol1 = '@'
atSymbol1: Char = @

scala> val x3: Int = "Hello"
<console>:7: error: type mismatch;
 found   : String("Hello")
 required: Int
       val x3: Int = "Hello"
                     ^

// Variables
//----------
scala> var x = 5
x: Int = 5

scala> x = x * 4
x: Int = 20

scala> x = "What's up?"
<console>:8: error: type mismatch;
 found   : String("What\'s up?")
 required: Int
       x = "What's up?"
           ^

scala> var y = 1.5
y: Double = 1.5

scala> y = 42
y: Double = 42.0

// Names
// -----
scala> var π = 3.14159
π: Double = 3.14159

scala> var $ = "USD currency symbol"
$: String = USD currency symbol

scala> val o_O = "Hmm"
o_O: String = Hmm

scala> val 50cent = "$0.50"
<console>:1: error: Invalid literal number
       val 50cent = "$0.50"
           ^

scala> val a.b = 25
<console>:7: error: not found: value a
       val a.b = 25
           ^

scala> val `a.b` = 4
a.b: Int = 4

// Types
// -----
// Numeric data types
scala> val b: Byte = 10
b: Byte = 10

scala> val s: Short = b
s: Short = 10

scala> val d: Double = s
d: Double = 10.0

scala> val l: Long = 20
l: Long = 20

scala> val i: Int = l
<console>:8: error: type mismatch;
 found   : Long
 required: Int
       val i: Int = l
                    ^

scala> val i: Int = l.toInt
i: Int = 20

scala> val anInt = 5
anInt: Int = 5

scala> val yellowRgb = 0xffff00
yellowRgb: Int = 16776960

scala> val id = 100l
id: Long = 100

scala> val pi = 3.14159
pi: Double = 3.14159

// Strings
scala> val hello = "Hello There"
hello: String = Hello There

scala> val signature = "With Regards, \nYour friend"
signature: String =
With Regards,
Your friend

scala> val greeting = "Hello, " + "World"
greeting: String = Hello, World

scala> val matched = (greeting == "Hello, World")
matched: Boolean = true

scala> val theme = "Na " * 16 + "Batman!"
theme: String = Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Batman!

scala> val greeting = """She suggested reformatting the file
     | by replacing tabs (\t) with newlines (\n);
     | "Why do that?", he asked. """
greeting: String =
"She suggested reformatting the file
by replacing tabs (\t) with newlines (\n);
"Why do that?", he asked. "
