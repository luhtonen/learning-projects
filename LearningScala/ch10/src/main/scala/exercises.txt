1. How would you extend a function? What are some of the applications for a class or trait that
   extends Function1[A,B]? If you are writing such a class or trait, would you extend Function1[A,B]
   or choose to extend A => B ?
2. How would you write a function type for a function that has two parameter lists, each with a
   single integer, and returns a single integer? If you wrote it as a Func tionX class, what would
   the exact class and type parameters contain?
3. A popular use for implicit parameters is for a default setting that works most of the time but
   may be overridden in special cases. Assume you are writing a sorting function that takes lines of
   text, and the lines may start with a right-aligned number. If you want to sort using the numbers,
   which may be prefixed by spaces, how would you encode this ability in an implicit parameter? How
   would you allow users to override this behavior and ignore the numbers for sorting?
4. Assume you wrote your own version of Option[A], calling it Perhaps[A], and implemented one or two
   methods to access its contents. What kind of implicit conversion would you need to provide in
   order to allow it to be treated as a collection?
   How would you be able to invoke flatMap and filter on your instance without implementing those
   methods?
5. How would you implement your own string class named Characters that supports all of the JVM’s
   java.lang.String methods but can also be treated as a Scala collection? Would a combination of
   types and conversions do most of the work for you? I suggest perusing the source code for
   scala.Predef to find some hints.
6. How would you add a “sum” method on all tuples, which returns the sum of all numeric values in a
   tuple? For example, (a, "hi", 2.5, 1, true).sum should return 3.5.
7. A Function1 type takes type parameters, one for the input value and one for the output value.
   Which one should be covariant? Which one should be contravariant?
