task hello

hello << {
    print 'hello, '
}
hello << {
    println 'world'
}

task initializeDatabase
initializeDatabase << { println 'connect to database' }
initializeDatabase << { println 'update database schema' }
initializeDatabase { print 'configuring ' }
initializeDatabase { println 'database connection' }


task createSchema << {
    println 'create schema'
}
// Declare that world depends on hello
// Preserves any previously defined dependencies as well
task loadTestData {
    dependsOn createSchema
}
// An alternative way to express the same dependency
task loadTestData1 {
    dependsOn << createSchema
}
// Do the same using single quote (which are usually optional)
task loadTestData2 {
    dependsOn 'createSchema'
}
// Explicitly call the method on the task object
task loadTestData3
loadTestData3.dependsOn createSchema
// A shortcut for for declaring dependencies
task loadTestData4(dependsOn: createSchema)

task compileTestClasses << {
    println 'compile test classes'
}
// Declare dependencies one at a time
task loadTestData5 {
    dependsOn << compileTestClasses
    dependsOn << createSchema
}
// Pass dependencies as a variable-length list
task world1 {
    dependsOn compileTestClasses, createSchema
}
// Explicitly call the method on the task object
task world2
world2.dependsOn compileTestClasses, createSchema
// A shortcut for dependencies only
// Note the Groovy list syntax
task world3(dependsOn: [compileTestClasses, createSchema])

task setupDatabaseTests << {
    // This is the task's existing action
    println 'load test data'
}
setupDatabaseTests {
    doFirst {
        println 'create database schema from config'
    }
}
setupDatabaseTests.doFirst {
    println 'create database schema'
}
setupDatabaseTests.doFirst {
    println 'drop database schema'
}

// Initial task definition (maybe not easily editable)
task setupDatabaseTests1 << {
    println 'load test data'
}
// Our changes to the task (in a place we can edit them)
setupDatabaseTests1 {
    doFirst {
        println 'create dababase schema'
    }
    doFirst {
        println 'drop database schema'
    }
}doFirst(closure)